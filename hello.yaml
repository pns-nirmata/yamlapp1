apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  managedFields:
  - apiVersion: rbac.authorization.k8s.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:rbac.authorization.kubernetes.io/autoupdate: {}
        f:labels:
          .: {}
          f:kubernetes.io/bootstrapping: {}
      f:rules: {}
    manager: kube-apiserver
    operation: Update
  name: get-cluster-access
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  annotations: {}
  name: "hello-world"
  labels:
    nirmata.io/deployment.name: "hello-world"
    nirmata.io/application.name: "hello-world"
    nirmata.io/component: "hello-world"
    damien: "test1"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      nirmata.io/application.name: "hello-world"
      nirmata.io/component: "hello-world"
    matchExpressions: []
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations: {
        test: "test",
        aaa: "bbb",
        ccc: "ddd"
      }
      labels:
        nirmata.io/deployment.name: "hello-world"
        nirmata.io/application.name: "hello-world"
        nirmata.io/component: "hello-world"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      containers:
      - name: "hello-world"
        image: "nirmata/hello-world:green"
        command: []
        args: []
        imagePullPolicy: "Always"
        ports:
        - containerPort: 808
          protocol: "TCP"
        startupProbe:
          httpGet:
            path: /healthz
            port: liveness-port
          failureThreshold: 30
          periodSeconds: 10
